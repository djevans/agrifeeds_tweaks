<?php
/**
 *  Implements hook_views_api().
 */
function sparqly_tweaks_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'sparqly_tweaks') . '/views',
  );
}

/**
 *  Implements hook_rdf_mapping().
 */
function sparqly_tweaks_rdf_mapping() {
  $mappings = array();
  $mappings['dataset'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'dataset',
    'mapping' => array(
      'rdftype' => array('dcat:Dataset'),
      'dc_title' => array(
        'predicates' => array('dc:title'),
      ),
      'dc_publisher' => array(
        'predicates' => array('dc:publisher'),
        'type'       => 'rel',
      ),
      'dcat_theme' => array(
        'predicates' => array('dcat:theme'),
        'type'       => 'rel',
      ),
      'doap_maintainer' => array(
        'predicates' => array('doap:maintainer'),
        'type'       => 'rel',
      ),
      'dcat_distribution' => array(
        'predicates' => array('dcat:distribution'),
        'type'       => 'rel',
      )
    ),
  );
  $mappings['distribution'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'distribution',
    'mapping' => array(
      'rdftype' => array('dcat:Distribution'),
      // @TODO remove dc:format
      'dc_format' => array(
        'predicates' => array('dc:format'),
        'type'       => 'rel',
      ),
      'dcat_access_url' => array(
        'predicates' => array('dcat:accessURL'),
      ),
      'dc_conforms_to' => array(
        'predicates' => array('dc:conformsTo'),
        'type'       => 'rel',
      ),
      'adms_representation_technique' => array(
        'predicates' => array('adms:representationTechnique'),
        'type'       => 'rel',
      ),
    ),
  );
  $mappings['organization'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'organization',
    'mapping' => array(
      'rdftype' => array('foaf:Organization'),
      'foaf_name' => array(
        'predicates' => array('foaf:name'),
      ),
    ),
  );
  $mappings['linguistic_system'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'linguistic_system',
    'mapping' => array(
      'rdftype' => array('dc:LinguisticSystem'),
      'skos_pref_label' => array(
        'predicates' => array('skos:prefLabel'),
      ),
    ),
  );
  $mappings['standard'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'standard',
    'mapping' => array(
      'rdftype' => array('dc:Standard'),
      'skos_pref_label' => array(
        'predicates' => array('skos:prefLabel'),
      ),
    ),
  );
  $mappings['concept'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'concept',
    'mapping' => array(
      'rdftype' => array('skos:Concept'),
      'skos_pref_label' => array(
        'predicates' => array('skos:prefLabel'),
      ),
      'skos_in_scheme' => array(
        'predicates' => array('skos:inScheme'),
        'type'       => 'rel',
      ),
    ),
  );
  $mappings['concept_scheme'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'concept_scheme',
    'mapping' => array(
      'rdftype' => array('skos:ConceptScheme'),
      'dc_title' => array(
        'predicates' => array('dc:title'),
      ),
    ),
  );
  $mappings['location'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'location',
    'mapping' => array(
      'rdftype' => array('dc:Location'),
      'skos_pref_label' => array(
        'predicates' => array('skos:prefLabel'),
      ),
    ),
  );
  $mappings['person'] = array(
    'type' => 'sparql_views_resource',
    'bundle' => 'person',
    'mapping' => array(
      'rdftype' => array('foaf:Person'),
      'foaf_name' => array(
        'predicates' => array('foaf:name'),
      ),
    ),
  );

  return $mappings;
}

/**
 *  Implements hook_rdf_namespaces().
 */
function sparqly_tweaks_rdf_namespaces() {
  $namespaces = array(
    'adms'    => 'http://www.w3.org/ns/adms#',
    'dcat'    => 'http://www.w3.org/ns/dcat#',
    'dctype'  => 'http://purl.org/dc/dcmitype/',
    'doap'    => 'http://usefulinc.com/ns/doap#',
  );
  return $namespaces;
}

/**
 *  Implements hook_views_plugins_alter().
 */
function sparqly_tweaks_views_plugins_alter(&$plugins) {
  $plugins['query']['sparql_views_query']['handler'] = 'sparqly_tweaks_plugin_query_sparql_vbo';
}

/**
 *  Implements hook_action_info().
 */
function sparqly_tweaks_action_info() {
  return array(
    'sparqly_tweaks_create_node' => array(
      'type' => 'sparql_views_resource',
      'label' => t('Create or update a node'),
      'configurable' => FALSE, // @todo later TRUE
      'behavior' => array(),
      'triggers' => array('any'),
      'pass rows' => TRUE,
    ),
  );
}



function sparqly_tweaks_create_node_form($settings, &$form_state) {
  $form = array();
  return $form;
}

function sparqly_tweaks_create_node_submit($form, $form_state) {

}
